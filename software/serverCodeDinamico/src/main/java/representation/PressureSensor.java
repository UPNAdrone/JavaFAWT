package representation;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;
import userInterface.ControlFrame;

/**
 *
 * @author Mintxoo - mintxosola@gmail.com
 */
public class PressureSensor extends javax.swing.JFrame {
    public ControlFrame control;
    BufferedReader in;
            
    public PressureSensor(ControlFrame c) {
        initComponents();
        this.control = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        popupMenu1 = new java.awt.PopupMenu();
        jLabel1 = new javax.swing.JLabel();
        showPressure = new java.awt.List();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        popupMenu1.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Pressure Sensor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(showPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(showPressure, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @throws InterruptedException
     * @throws IOException
     */
    public void run() throws InterruptedException, IOException {
        conectPressureServer();
        char[] buffer = new char[1024]; // Buffer para almacenar los datos recibidos
        int bytesRead;

        while (true) {
            bytesRead = in.read(buffer);
            if (bytesRead == -1) {
                break;
            }

            String data = new String(buffer, 0, bytesRead);
            String[] values = data.split(",");
            for (int i = 0; i < values.length; i++) {
                if (i == 33)
                    showPressure.add("");
                System.out.println("");
                System.out.println(i + ": " + values[i]);
                showPressure.add(i + ": " + values[i]);
            }
            showPressure.add("");
            Thread.sleep(15000);
        }
        showPressure.add("----Fin de lectura----");
    }

    public void conectPressureServer() throws InterruptedException{
        if(control.pressureSensorIP == null || control.pressureSensorPort == -1){
            NewPSensor ps = new NewPSensor(control);
            ps.run();
            ps.dispose();
        }
        try {
            Socket socket = new Socket(control.pressureSensorIP, control.pressureSensorPort);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            showPressure.add("----Conectado correctamente----");      
        } catch (Exception e) {
            System.err.println("No se pudo conectar al host: " + control.pressureSensorIP);
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private java.awt.PopupMenu popupMenu1;
    private java.awt.List showPressure;
    // End of variables declaration//GEN-END:variables
}
