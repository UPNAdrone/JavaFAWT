package userInterface;

import representation.Fan;
import functionality.Functionality;
import functionality.Index;
import representation.PressureSensor;
import functionality.Principal;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import connection.InterfaceServer;


import java.io.File;
import javax.swing.JButton;
import javax.swing.JFrame;
import representation.SpeedDrawing;


/**
 *
 * @author Mintxoo - mintxosola@gmail.com
 */
public class ControlFrame extends javax.swing.JFrame {
    public int activeFan = 0;
    public InterfaceServer server;
    
    public List<Fan> fanButtons = new LinkedList<>();
    public List<Functionality> functionalityList = new LinkedList<>();
    public int[] speedMessage;
    public SpeedDrawing speedDrawing;
    public boolean functionalityExecuting = false;
    
    public File funFile = null;
    public Index index = new Index();
    public Functionality functionality;
    public boolean firstTime = true;
    public String pressureSensorIP = null;
    public int pressureSensorPort = -1;
    
    
    /**
     * Creates new form MainFrame
     * @param server
     */
    public ControlFrame(InterfaceServer server) {
        initComponents();
        this.server = server;
    }
    
    public void setSpeedInstance(SpeedDrawing speedDrawing) {
        this.speedDrawing = speedDrawing;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        menuBar3 = new java.awt.MenuBar();
        menu5 = new java.awt.Menu();
        menu6 = new java.awt.Menu();
        jLabel2 = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        showSpeed = new javax.swing.JLabel();
        updateSpeed = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numActiveFans = new javax.swing.JLabel();
        selectedFan = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        currentSpeed = new javax.swing.JLabel();
        stopAllFans = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addFunctionality = new javax.swing.JButton();
        funExecution = new javax.swing.JButton();
        stopFun = new javax.swing.JButton();
        executing = new javax.swing.JLabel();
        funPreview = new javax.swing.JButton();
        pressureSensor = new javax.swing.JButton();
        funAction = new javax.swing.JLabel();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        menu5.setLabel("File");
        menuBar3.add(menu5);

        menu6.setLabel("Edit");
        menuBar3.add(menu6);

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        speedSlider.setMajorTickSpacing(100);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setValue(0);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        showSpeed.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        showSpeed.setText("0");

        updateSpeed.setBackground(new java.awt.Color(255, 204, 255));
        updateSpeed.setText("UPDATE");
        updateSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSpeedActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("WIND TUNEL GUI");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Active fans:");

        numActiveFans.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        numActiveFans.setText("x fans");

        selectedFan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        selectedFan.setText("Selected fan");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Current Speed:");

        currentSpeed.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentSpeed.setText("0 %");

        stopAllFans.setBackground(new java.awt.Color(255, 255, 153));
        stopAllFans.setText("STOP ALL");
        stopAllFans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopAllFansMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("FANS SCHEMA");

        addFunctionality.setText("Add Functionality File");
        addFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFunctionalityActionPerformed(evt);
            }
        });

        funExecution.setText("Execute Functionality");
        funExecution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funExecutionActionPerformed(evt);
            }
        });

        stopFun.setText("Stop Execution");
        stopFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopFunActionPerformed(evt);
            }
        });

        funPreview.setText("Execute Preview");
        funPreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                funPreviewMouseClicked(evt);
            }
        });

        pressureSensor.setBackground(new java.awt.Color(255, 153, 153));
        pressureSensor.setText("Show Pressure");
        pressureSensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pressureSensorMouseClicked(evt);
            }
        });

        funAction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        funAction.setText("functionality info");
        funAction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numActiveFans, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(stopAllFans)))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectedFan, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(currentSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(executing, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(addFunctionality))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(104, 104, 104)
                                            .addComponent(updateSpeed)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(showSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(44, 44, 44)
                                            .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(13, 13, 13))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(stopFun)
                                            .addGap(14, 14, 14))
                                        .addComponent(funPreview, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(40, 40, 40)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(pressureSensor)
                                .addGap(67, 67, 67))
                            .addComponent(funAction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(funExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(numActiveFans))
                        .addGap(14, 14, 14)
                        .addComponent(jLabel1)
                        .addGap(364, 364, 364)
                        .addComponent(stopAllFans)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(executing)
                                .addGap(99, 99, 99))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(selectedFan)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(currentSpeed))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateSpeed)
                            .addComponent(showSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(pressureSensor)
                        .addGap(33, 33, 33)
                        .addComponent(addFunctionality)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(funPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(funAction)
                        .addGap(12, 12, 12)
                        .addComponent(stopFun)
                        .addGap(64, 64, 64))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        showSpeed.setText(""+speedSlider.getValue());
    }//GEN-LAST:event_speedSliderStateChanged

    private void updateSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSpeedActionPerformed
        if(!functionalityExecuting){
            boolean anySelected = false;
            for (int i = 0; i < fanButtons.size(); i++){
                if(fanButtons.get(i).selected){
                    anySelected = true;
                    speedMessage[i] = speedSlider.getValue();
                    fanButtons.get(i).speed = speedSlider.getValue();
                }
            }
            if (anySelected){
                server.updateSpeed(speedMessage);
                speedDrawing.updateDrawing();
                currentSpeed.setText(""+speedSlider.getValue());
            }
        }
    }//GEN-LAST:event_updateSpeedActionPerformed

    private void stopAllFansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopAllFansMouseClicked
        for (int i = 0; i < fanButtons.size(); i++){
            speedMessage[i] = 0;
            fanButtons.get(i).speed = 0;
        }
        server.updateSpeed(speedMessage);
        speedDrawing.updateDrawing();
        currentSpeed.setText("0");
        speedSlider.setValue(0);
    }//GEN-LAST:event_stopAllFansMouseClicked

    private void addFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFunctionalityActionPerformed
        try {
            funFile = null;
            Principal principal = new Principal(this);
            principal.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            index.getFunFile(principal);
            firstTime = true;
        } catch (Exception e) {
            System.out.println("Error adding functionality file");
            e.printStackTrace();
        }
    }//GEN-LAST:event_addFunctionalityActionPerformed

    private static String getFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex > 0) {
            return fileName.substring(lastDotIndex + 1);
        }
        return "";
    }
    
    private void funExecutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funExecutionActionPerformed
        try {
            functionality = new Functionality(this, speedDrawing,true);
            functionalityList.add(functionality);
            functionality.start();
            if(!getFileExtension(funFile.getName()).equals("svg")){
                functionalityExecuting = false;
                funAction.setText("Wrong file");
            }else{
                functionalityExecuting = true;
                funAction.setText("Functionality is executing... please wait");
            }
            
        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funExecutionActionPerformed

    private void stopFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopFunActionPerformed
        try{
            for (Functionality f : functionalityList) {
                f.interrupt();
            }
            functionalityExecuting = false;
            funAction.setText("No functionality executing");
        }catch(Exception e){
            System.out.println("Error on the stop of the functionality execution");
        }
        
    }//GEN-LAST:event_stopFunActionPerformed

    private void funPreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_funPreviewMouseClicked
        try {
            SpeedDrawing speedDrawing_aux = new SpeedDrawing(this);
            speedDrawing_aux.setVisible(true);
            speedDrawing_aux.setTitle("PREVIEW");
            speedDrawing_aux.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            speedDrawing_aux.setResizable(false);
            speedDrawing_aux.setLocation(500, 100);
            
            functionality = new Functionality(this, speedDrawing_aux,false);
            functionalityList.add(functionality);
            functionality.start();
            functionalityExecuting = true;
            funAction.setText("Preview is executing...");
            
        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funPreviewMouseClicked

    
    
    private void pressureSensorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pressureSensorMouseClicked
        try {
           Thread pressureThread = new Thread(() -> {
                PressureSensor pressure = new PressureSensor(this);
                pressure.setVisible(true);
                pressure.setTitle("PRESSURE");
                pressure.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                pressure.setResizable(false);
                pressure.setLocation(800, 200);
               try {
                   pressure.run();
               } catch (Exception e) {System.out.println("Error with the sensor");}
            });
            pressureThread.start();
            
        } catch (Exception ex) {
            System.out.println("Error showing pressure sensor info");
        }
    }//GEN-LAST:event_pressureSensorMouseClicked

    
    
    public void run() throws InterruptedException{
        
        int cant = server.clients.size();
        enterFans(fanButtons,cant);
        setFansColor(cant,fanButtons);
        funExecution.setEnabled(false);
        funPreview.setEnabled(false);
        stopFun.setEnabled(false);
        while(true){
            Thread.sleep(50);
            if(funAction.getText().equals("No functionality executing")){
                functionalityExecuting = false;
            }
            
            if(funFile != null & firstTime){
                funAction.setText("File "+funFile.getName()+" added");
                funExecution.setEnabled(true);
                funPreview.setEnabled(true);
                stopFun.setEnabled(true);
                firstTime = false;
            }else if (funFile == null){
                funAction.setText("No file added");
            }
        }
    }
    
    public void enterFans(List<Fan> fanBottons, int cant){   
        cant = 1;
        for (int i = 0; i < 6*cant; i++) {
            JButton f = new JButton(""+i);
            if (i%2!=0){ // impar --> primera columna
                f.setBounds(50*(i%6), 200+i*50, 50, 50);  // x, y, width, height
            }else{
                f.setBounds(50*(i%6)+50, 200+i*50, 50, 50);  // x, y, width, height
            }
            
            this.add(f);
            fanBottons.add(new Fan(f));
        }
            
    }
        
    public void setFansColor(int cant, List<Fan> fanBottons){
        for (int i = fanBottons.size()-1; i >= 6*cant; i--) {
            fanBottons.get(i).button.setBackground(Color.red);
            fanBottons.get(i).button.removeNotify();
            fanBottons.remove(i);
        }
        speedMessage = new int[fanBottons.size()];
        numActiveFans.setText(""+cant*6);
        for (int i = 0; i < 6*cant; i++) {
            fanBottons.get(i).button.setBackground(Color.white);
            speedMessage[i] = 0;
        }
    }
    
    public void fanControl(int i){
        selectedFan.setText("Fan "+(i+1)+" info");
        if (fanButtons.get(i).selected){
            fanButtons.get(i).selected = false;
            fanButtons.get(i).button.setBackground(Color.white);
        }else{
            fanButtons.get(i).selected = true;
            fanButtons.get(i).button.setBackground(Color.green);
        }
        currentSpeed.setText(""+fanButtons.get(i).speed);
        speedSlider.setValue(fanButtons.get(i).speed);
        showSpeed.setText(""+speedSlider.getValue());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFunctionality;
    private javax.swing.JLabel currentSpeed;
    private javax.swing.JLabel executing;
    private javax.swing.JLabel funAction;
    private javax.swing.JButton funExecution;
    private javax.swing.JButton funPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.Menu menu5;
    private java.awt.Menu menu6;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.MenuBar menuBar3;
    private javax.swing.JLabel numActiveFans;
    private javax.swing.JButton pressureSensor;
    private javax.swing.JLabel selectedFan;
    private javax.swing.JLabel showSpeed;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton stopAllFans;
    private javax.swing.JButton stopFun;
    private javax.swing.JButton updateSpeed;
    // End of variables declaration//GEN-END:variables
    }
