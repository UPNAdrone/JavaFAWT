package userInterface;

import representation.Fan;
import functionality.Functionality;
import functionality.Index;
import representation.PressureSensor;
import functionality.Principal;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import connection.InterfaceServer;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


import java.io.File;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import representation.SpeedDrawing;


/**
 *
 * @author Mintxoo - mintxosola@gmail.com
 */
public class ControlFrame extends javax.swing.JFrame {
    public int activeFan = 0;
    public InterfaceServer server;
    
    public List<Fan> fanButtons = new LinkedList<>();
    public List<Functionality> functionalityList = new LinkedList<>();
    public int[] speedMessage;
    public SpeedDrawing speedDrawing;
    public boolean functionalityExecuting = false;
    
    public File funFile = null;
    public Index index = new Index();
    public Functionality functionality;
    public boolean firstTime = true;
    public String pressureSensorIP = null;
    public int pressureSensorPort = -1;
    public final int rows, cols;
    
    public final JFileChooser openFileChooser;
    
    /**
     * Creates new form MainFrame
     * @param server
     * @param rows
     * @param cols
     */
    public ControlFrame(InterfaceServer server, int rows, int cols) {
        initComponents();
        this.server = server;
        openFileChooser = new JFileChooser();
        openFileChooser.setCurrentDirectory(new File("../../functionalities"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("CSV","csv"));
        this.rows = rows;
        this.cols = cols;
    }
    
    public void setSpeedInstance(SpeedDrawing speedDrawing) {
        this.speedDrawing = speedDrawing;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        menuBar3 = new java.awt.MenuBar();
        menu5 = new java.awt.Menu();
        menu6 = new java.awt.Menu();
        jLabel2 = new javax.swing.JLabel();
        stopAllFans = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        executing = new javax.swing.JLabel();
        unselectAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        funExecution = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        stopFun = new javax.swing.JButton();
        funPreview = new javax.swing.JButton();
        pressureSensor = new javax.swing.JButton();
        funAction = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        showSpeed = new javax.swing.JLabel();
        updateSpeed = new javax.swing.JButton();
        browseFunctionality = new javax.swing.JButton();
        dragAndDropFunctionality = new javax.swing.JButton();
        selectAll = new javax.swing.JButton();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        menu5.setLabel("File");
        menuBar3.add(menu5);

        menu6.setLabel("Edit");
        menuBar3.add(menu6);

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        stopAllFans.setBackground(new java.awt.Color(255, 255, 153));
        stopAllFans.setText("STOP ALL");
        stopAllFans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopAllFansMouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("FANS SCHEMA");

        unselectAll.setBackground(new java.awt.Color(255, 204, 204));
        unselectAll.setText("Unselect All");
        unselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectAllActionPerformed(evt);
            }
        });

        funExecution.setText("Execute Functionality");
        funExecution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funExecutionActionPerformed(evt);
            }
        });

        jLabel3.setText("Add Functionality File");

        stopFun.setText("Stop Execution");
        stopFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopFunActionPerformed(evt);
            }
        });

        funPreview.setText("Execute Preview");
        funPreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                funPreviewMouseClicked(evt);
            }
        });

        pressureSensor.setBackground(new java.awt.Color(102, 255, 255));
        pressureSensor.setText("Show Pressure");
        pressureSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressureSensorActionPerformed(evt);
            }
        });

        funAction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        funAction.setText("functionality info");
        funAction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        speedSlider.setMajorTickSpacing(100);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setValue(0);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });

        showSpeed.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        showSpeed.setText("0");

        updateSpeed.setBackground(new java.awt.Color(255, 204, 255));
        updateSpeed.setText("UPDATE");
        updateSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSpeedActionPerformed(evt);
            }
        });

        browseFunctionality.setText("Browse");
        browseFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFunctionalityActionPerformed(evt);
            }
        });

        dragAndDropFunctionality.setText("Drag and Drop");
        dragAndDropFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragAndDropFunctionalityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(updateSpeed)
                                .addGap(29, 29, 29)
                                .addComponent(showSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(funAction, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dragAndDropFunctionality)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(browseFunctionality)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(pressureSensor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(funExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(funPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(stopFun)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(funPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(funExecution, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(stopFun))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(updateSpeed)
                                    .addComponent(showSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dragAndDropFunctionality)
                                    .addComponent(browseFunctionality))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(funAction)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pressureSensor)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectAll.setBackground(new java.awt.Color(153, 255, 153));
        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(executing, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stopAllFans)
                .addGap(31, 31, 31)
                .addComponent(unselectAll)
                .addGap(26, 26, 26)
                .addComponent(selectAll)
                .addGap(284, 284, 284))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(stopAllFans)
                    .addComponent(unselectAll)
                    .addComponent(selectAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(executing)
                .addGap(231, 231, 231))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopAllFansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopAllFansMouseClicked
        for (int i = 0; i < fanButtons.size(); i++){
            speedMessage[i] = 0;
            fanButtons.get(i).speed = 0;
        }
        server.updateSpeed(speedMessage);
        speedDrawing.updateDrawing();
        speedSlider.setValue(0);
    }//GEN-LAST:event_stopAllFansMouseClicked

    private static String getFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex > 0) {
            return fileName.substring(lastDotIndex + 1);
        }
        return "";
    }
    
    private void unselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectAllActionPerformed
        for (Fan f : fanButtons) {
            f.selected = false;
            f.button.setBackground(Color.white);
        }
    }//GEN-LAST:event_unselectAllActionPerformed

    private void browseFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFunctionalityActionPerformed
        int returnValue = openFileChooser.showOpenDialog(this);

        if(returnValue == JFileChooser.APPROVE_OPTION){
            try{
                funFile = openFileChooser.getSelectedFile();
                funAction.setText("new "+funFile.getName());
            }catch (Exception e){
                System.out.println("Error adding functionality file");
                funAction.setText("Error adding functionality file");
            }
        }else{
            System.out.println("No file choosen");
            funAction.setText("No file choosen");
        }
    }//GEN-LAST:event_browseFunctionalityActionPerformed

    private void updateSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSpeedActionPerformed
        if(!functionalityExecuting){
            boolean anySelected = false;
            for (int i = 0; i < fanButtons.size(); i++){
                if(fanButtons.get(i).selected){
                    anySelected = true;
                    speedMessage[i] = speedSlider.getValue();
                    fanButtons.get(i).speed = speedSlider.getValue();
                }
            }
            if (anySelected){
                server.updateSpeed(speedMessage);
                speedDrawing.updateDrawing();
            }
        }
    }//GEN-LAST:event_updateSpeedActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        showSpeed.setText(""+speedSlider.getValue());
    }//GEN-LAST:event_speedSliderStateChanged

    private void funPreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_funPreviewMouseClicked
        try {
            SpeedDrawing speedDrawing_aux = new SpeedDrawing(this);
            speedDrawing_aux.setVisible(true);
            speedDrawing_aux.setTitle("PREVIEW");
            speedDrawing_aux.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            speedDrawing_aux.setResizable(false);
            speedDrawing_aux.setLocation(500, 100);

            functionality = new Functionality(this, speedDrawing_aux,false);
            functionalityList.add(functionality);
            functionality.start();
            functionalityExecuting = true;
            funAction.setText("Preview is executing...");

        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funPreviewMouseClicked

    private void stopFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopFunActionPerformed
        try{
            for (Functionality f : functionalityList) {
                f.interrupt();
            }
            functionalityExecuting = false;
            funAction.setText("No functionality executing");
        }catch(Exception e){
            System.out.println("Error on the stop of the functionality execution");
        }

    }//GEN-LAST:event_stopFunActionPerformed

    private void funExecutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funExecutionActionPerformed
        try {
            functionality = new Functionality(this, speedDrawing,true);
            functionalityList.add(functionality);
            functionality.start();
            if(!getFileExtension(funFile.getName()).equals("csv")){
                functionalityExecuting = false;
                funAction.setText("Wrong file");
            }else{
                functionalityExecuting = true;
                funAction.setText("Functionality is executing... please wait");
            }

        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funExecutionActionPerformed

    private void dragAndDropFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragAndDropFunctionalityActionPerformed
        try {
            funFile = null;
            Principal principal = new Principal(this);
            principal.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            index.getFunFile(principal);
            firstTime = true;
        } catch (Exception e) {
            System.out.println("Error adding functionality file");
            e.printStackTrace();
        }
    }//GEN-LAST:event_dragAndDropFunctionalityActionPerformed

    private void pressureSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressureSensorActionPerformed
        try {
            Thread pressureThread = new Thread(() -> {
                PressureSensor pressure = new PressureSensor(this);
                pressure.setVisible(true);
                pressure.setTitle("PRESSURE");
                pressure.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                pressure.setResizable(false);
                pressure.setLocation(800, 200);
                try {
                    pressure.run();
                } catch (Exception e) {System.out.println("Error with the sensor");}
            });
            pressureThread.start();

        } catch (Exception ex) {
            System.out.println("Error showing pressure sensor info");
        }
    }//GEN-LAST:event_pressureSensorActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        for (Fan f : fanButtons) {
            f.selected = true;
            f.button.setBackground(Color.green);
        }
    }//GEN-LAST:event_selectAllActionPerformed

    
    public void run() throws InterruptedException{
        int cant = server.clients.size();
        enterFans(fanButtons);
        setFansColor(cant,fanButtons);
        funExecution.setEnabled(false);
        funPreview.setEnabled(false);
        stopFun.setEnabled(false);
        while(true){
            Thread.sleep(50);
            if(funAction.getText().equals("No functionality executing")){
                functionalityExecuting = false;
            }
            
            if(funFile != null & firstTime){
                funAction.setText("File "+funFile.getName()+" added");
                funExecution.setEnabled(true);
                funPreview.setEnabled(true);
                stopFun.setEnabled(true);
                firstTime = false;
            }else if (funFile == null){
                funAction.setText("No file added");
            }
        }
    }
    
    private void enterFans(List<Fan> fanBottons) {
        int buttonWidth = 50;
        int buttonHeight = 50;
        int verticalSpacing = 100;
        int horizontalSpacing = 100;
        int hDist = 50, vDist = 225;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int start = (i * cols + j) * 6 + 1;
                int end = start + 5;

                for (int k = start; k <= end; k++) {
                    JButton f = new JButton("" + k);
                    int xOffset = hDist+j * horizontalSpacing;
                    int yOffset = vDist+i * (buttonHeight + verticalSpacing);

                    if (k % 2 != 0) {
                        f.setBounds(xOffset, yOffset + ((k - start) / 2) * buttonHeight, buttonWidth, buttonHeight);
                    } else {
                        f.setBounds(xOffset + buttonWidth, yOffset + ((k - start) / 2) * buttonHeight, buttonWidth, buttonHeight);
                    }
                    this.add(f);
                    fanBottons.add(new Fan(f));
                    final int n = k-1;
                    f.addActionListener((ActionEvent evt) -> {
                        fanActionPerformed(evt, n);
                    });
                }
            }
        }
        this.revalidate();
        this.repaint();
    }
    
    public void fanActionPerformed(ActionEvent evt, int fanNumber){
        activeFan = fanNumber;
        fanControl(activeFan);
    }
        
    public void setFansColor(int cant, List<Fan> fanBottons){
        for (int i = fanBottons.size()-1; i >= 6*cant; i--) {
            fanBottons.get(i).button.setBackground(Color.red);
            fanBottons.get(i).button.removeNotify();
            fanBottons.remove(i);
        }
        System.out.println("La cantidad de clientes es: "+fanBottons.size());
        speedMessage = new int[fanBottons.size()];
        for (int i = 0; i < 6*cant; i++) {
            fanBottons.get(i).button.setBackground(Color.white);
            speedMessage[i] = 0;
        }
    }
    
    public void fanControl(int i){
        if (fanButtons.get(i).selected){
            fanButtons.get(i).selected = false;
            fanButtons.get(i).button.setBackground(Color.white);
        }else{
            fanButtons.get(i).selected = true;
            fanButtons.get(i).button.setBackground(Color.green);
        }
        speedSlider.setValue(fanButtons.get(i).speed);
        showSpeed.setText(""+speedSlider.getValue());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFunctionality;
    private javax.swing.JButton dragAndDropFunctionality;
    private javax.swing.JLabel executing;
    private javax.swing.JLabel funAction;
    private javax.swing.JButton funExecution;
    private javax.swing.JButton funPreview;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.Menu menu5;
    private java.awt.Menu menu6;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.MenuBar menuBar3;
    private javax.swing.JButton pressureSensor;
    private javax.swing.JButton selectAll;
    private javax.swing.JLabel showSpeed;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton stopAllFans;
    private javax.swing.JButton stopFun;
    private javax.swing.JButton unselectAll;
    private javax.swing.JButton updateSpeed;
    // End of variables declaration//GEN-END:variables
    }
