package userInterface;

import representation.Fan;
import functionality.Functionality;
import functionality.Index;
import representation.PressureSensor;
import functionality.Principal;
import java.awt.Color;
import java.util.LinkedList;
import java.util.List;
import connection.InterfaceServer;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


import java.io.File;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Mintxoo - mintxosola@gmail.com
 */
public class ControlFrame extends javax.swing.JFrame {
    public int activeFan = 0;
    public InterfaceServer server;
    
    public List<Fan> fanButtons = new LinkedList<>();
    public List<Functionality> functionalityList = new LinkedList<>();
    public int[] speedMessage;
    public boolean functionalityExecuting = false, pressureSensorConected = false;
    
    public File funFile = null;
    public Index index = new Index();
    public Functionality functionality;
    public boolean firstTime = true;
    public String pressureSensorIP = null;
    public int pressureSensorPort = -1;
    public final int rows, cols;
    public int tab1Index, tab2Index;
    
    public final JFileChooser openFileChooser;
    
    /**
     * Creates new form MainFrame
     * @param server
     * @param rows
     * @param cols
     */
    public ControlFrame(InterfaceServer server, int rows, int cols) {
        initComponents();
        this.server = server;
        openFileChooser = new JFileChooser();
        openFileChooser.setCurrentDirectory(new File("../../functionalities"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("SVG","svg"));
        this.rows = rows;
        this.cols = cols;
        tab1Index = speedPanel.indexOfComponent(jPanel4);
        tab2Index = speedPanel.indexOfComponent(jPanel5);
        speedPanel.addChangeListener(e -> {
            int selectedIndex = speedPanel.getSelectedIndex();
            if (selectedIndex == tab1Index) {
                System.out.println("1111");
                updateDrawing();
            } else if (selectedIndex == tab2Index) {
                System.out.println("2222");
                updateDrawing();
            }
        });
        //setSize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        menuBar2 = new java.awt.MenuBar();
        menu3 = new java.awt.Menu();
        menu4 = new java.awt.Menu();
        menuBar3 = new java.awt.MenuBar();
        menu5 = new java.awt.Menu();
        menu6 = new java.awt.Menu();
        jLabel2 = new javax.swing.JLabel();
        executing = new javax.swing.JLabel();
        speedPanel = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        dragAndDropFunctionality = new javax.swing.JButton();
        browseFunctionality = new javax.swing.JButton();
        funPreview = new javax.swing.JButton();
        funExecution = new javax.swing.JButton();
        stopFun = new javax.swing.JButton();
        funAction = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        preassurePanel = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        pressureSensor = new javax.swing.JButton();
        fanPanel = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        selectAll = new javax.swing.JButton();
        unselectAll = new javax.swing.JButton();
        speedSlider = new javax.swing.JSlider();
        showSpeed = new javax.swing.JLabel();
        updateSpeed = new javax.swing.JButton();
        stopAllFans = new javax.swing.JButton();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        menu3.setLabel("File");
        menuBar2.add(menu3);

        menu4.setLabel("Edit");
        menuBar2.add(menu4);

        menu5.setLabel("File");
        menuBar3.add(menu5);

        menu6.setLabel("Edit");
        menuBar3.add(menu6);

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        jPanel4.setBackground(new java.awt.Color(255, 204, 255));

        jToolBar1.setRollover(true);

        dragAndDropFunctionality.setText("Drag and Drop");
        dragAndDropFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dragAndDropFunctionalityActionPerformed(evt);
            }
        });
        jToolBar1.add(dragAndDropFunctionality);

        browseFunctionality.setText("Browse");
        browseFunctionality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseFunctionalityActionPerformed(evt);
            }
        });
        jToolBar1.add(browseFunctionality);

        funPreview.setText("Execute Preview");
        funPreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                funPreviewMouseClicked(evt);
            }
        });
        jToolBar1.add(funPreview);

        funExecution.setText("Execute Functionality");
        funExecution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funExecutionActionPerformed(evt);
            }
        });
        jToolBar1.add(funExecution);

        stopFun.setText("Stop Execution");
        stopFun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopFunActionPerformed(evt);
            }
        });
        jToolBar1.add(stopFun);

        funAction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        funAction.setText("functionality info");
        funAction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToolBar1.add(funAction);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 248, Short.MAX_VALUE))
        );

        speedPanel.addTab("Fans speed schema", jPanel4);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 533, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        speedPanel.addTab("Preview", jPanel5);

        preassurePanel.setBackground(new java.awt.Color(204, 255, 204));

        jToolBar3.setRollover(true);

        pressureSensor.setBackground(new java.awt.Color(102, 255, 255));
        pressureSensor.setText("Show Pressure");
        pressureSensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pressureSensorActionPerformed(evt);
            }
        });
        jToolBar3.add(pressureSensor);

        javax.swing.GroupLayout preassurePanelLayout = new javax.swing.GroupLayout(preassurePanel);
        preassurePanel.setLayout(preassurePanelLayout);
        preassurePanelLayout.setHorizontalGroup(
            preassurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );
        preassurePanelLayout.setVerticalGroup(
            preassurePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preassurePanelLayout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 655, Short.MAX_VALUE))
        );

        fanPanel.setBackground(new java.awt.Color(204, 255, 255));

        jToolBar2.setRollover(true);

        selectAll.setBackground(new java.awt.Color(153, 255, 153));
        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        jToolBar2.add(selectAll);

        unselectAll.setBackground(new java.awt.Color(255, 204, 204));
        unselectAll.setText("Unselect All");
        unselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectAllActionPerformed(evt);
            }
        });
        jToolBar2.add(unselectAll);

        speedSlider.setMajorTickSpacing(100);
        speedSlider.setPaintLabels(true);
        speedSlider.setPaintTicks(true);
        speedSlider.setValue(0);
        speedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                speedSliderStateChanged(evt);
            }
        });
        jToolBar2.add(speedSlider);

        showSpeed.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        showSpeed.setText("0");
        jToolBar2.add(showSpeed);

        updateSpeed.setBackground(new java.awt.Color(255, 204, 255));
        updateSpeed.setText("UPDATE");
        updateSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSpeedActionPerformed(evt);
            }
        });
        jToolBar2.add(updateSpeed);

        stopAllFans.setBackground(new java.awt.Color(255, 255, 153));
        stopAllFans.setText("STOP ALL");
        stopAllFans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopAllFansMouseClicked(evt);
            }
        });
        jToolBar2.add(stopAllFans);

        javax.swing.GroupLayout fanPanelLayout = new javax.swing.GroupLayout(fanPanel);
        fanPanel.setLayout(fanPanelLayout);
        fanPanelLayout.setHorizontalGroup(
            fanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fanPanelLayout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fanPanelLayout.setVerticalGroup(
            fanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fanPanelLayout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 304, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(speedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fanPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addComponent(preassurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 549, Short.MAX_VALUE)
                .addComponent(executing, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(289, 289, 289))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(executing)
                .addGap(305, 305, 305))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fanPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(speedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(preassurePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static String getFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex > 0) {
            return fileName.substring(lastDotIndex + 1);
        }
        return "";
    }
    
    public void setSize(){
        int w = 50+(50*2*cols)+75;
        if (w < 660){
            w = 660;
        }
        int h = 50+(50*3*rows)+75;
        if (h < 220){
            h = 580;
        }
        //fanPanel.setSize(w,h);
        //fanScrollPanel.setSize(w,h);
        
        //fanScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        //fanScrollPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        
        //speedPanel.setSize(50+120*cols,50+185*rows);
        


    }
    
    private void browseFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseFunctionalityActionPerformed
        int returnValue = openFileChooser.showOpenDialog(this);

        if(returnValue == JFileChooser.APPROVE_OPTION){
            try{
                funFile = openFileChooser.getSelectedFile();
                funAction.setText("new "+funFile.getName());
            }catch (Exception e){
                System.out.println("Error adding functionality file");
                funAction.setText("Error adding functionality file");
            }
        }else{
            System.out.println("No file choosen");
            funAction.setText("No file choosen");
        }
    }//GEN-LAST:event_browseFunctionalityActionPerformed

    private void funPreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_funPreviewMouseClicked
        try {
            functionality = new Functionality(this,false);
            functionalityList.add(functionality);
            functionality.start();
            functionalityExecuting = true;
            funAction.setText("Preview is executing...");

        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funPreviewMouseClicked

    private void stopFunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopFunActionPerformed
        try{
            for (Functionality f : functionalityList) {
                f.interrupt();
            }
            functionalityExecuting = false;
            funAction.setText("No functionality executing");
        }catch(Exception e){
            System.out.println("Error on the stop of the functionality execution");
        }

    }//GEN-LAST:event_stopFunActionPerformed

    private void funExecutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funExecutionActionPerformed
        try {
            functionality = new Functionality(this,true);
            functionalityList.add(functionality);
            functionality.start();
            if(!getFileExtension(funFile.getName()).equals("svg")){
                functionalityExecuting = false;
                funAction.setText("Wrong file");
            }else{
                functionalityExecuting = true;
                funAction.setText("Functionality is executing... please wait");
            }

        } catch (Exception ex) {
            System.out.println("Error reading functionality file");
            funAction.setText("Error reading functionality file");
        }
    }//GEN-LAST:event_funExecutionActionPerformed

    private void dragAndDropFunctionalityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dragAndDropFunctionalityActionPerformed
        try {
            funFile = null;
            Principal principal = new Principal(this);
            principal.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            index.getFunFile(principal);
            firstTime = true;
        } catch (Exception e) {
            System.out.println("Error adding functionality file");
            e.printStackTrace();
        }
    }//GEN-LAST:event_dragAndDropFunctionalityActionPerformed

    private void pressureSensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pressureSensorActionPerformed
        try {
            Thread pressureThread = new Thread(() -> {
                PressureSensor pressure = new PressureSensor(this);
                pressure.setVisible(true);
                pressure.setTitle("PRESSURE");
                pressure.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                pressure.setResizable(false);
                pressure.setLocation(800, 200);
                pressure.setSize(640, 370);
                try {
                    pressure.run();
                } catch (Exception e) {System.out.println("Error with the sensor");}
            });
            pressureThread.start();

        } catch (Exception ex) {
            System.out.println("Error showing pressure sensor info");
        }
    }//GEN-LAST:event_pressureSensorActionPerformed

    private void stopAllFansMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopAllFansMouseClicked
        for (int i = 0; i < fanButtons.size(); i++){
            speedMessage[i] = 0;
            fanButtons.get(i).speed = 0;
        }
        server.updateSpeed(speedMessage);
        updateDrawing();
        speedSlider.setValue(0);
    }//GEN-LAST:event_stopAllFansMouseClicked

    private void updateSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSpeedActionPerformed
        if(!functionalityExecuting){
            boolean anySelected = false;
            for (int i = 0; i < fanButtons.size(); i++){
                if(fanButtons.get(i).selected){
                    anySelected = true;
                    speedMessage[i] = speedSlider.getValue();
                    fanButtons.get(i).speed = speedSlider.getValue();
                }
            }
            if (anySelected){
                server.updateSpeed(speedMessage);
                updateDrawing();
            }
        }
    }//GEN-LAST:event_updateSpeedActionPerformed

    private void speedSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedSliderStateChanged
        showSpeed.setText(""+speedSlider.getValue());
    }//GEN-LAST:event_speedSliderStateChanged

    private void unselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectAllActionPerformed
        for (Fan f : fanButtons) {
            f.selected = false;
            f.button.setBackground(Color.white);
        }
    }//GEN-LAST:event_unselectAllActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        for (Fan f : fanButtons) {
            f.selected = true;
            f.button.setBackground(Color.green);
        }
    }//GEN-LAST:event_selectAllActionPerformed

    
    public void run() throws InterruptedException{
        int cant = server.clients.size();
        enterFans(fanButtons);
        setFansColor(cant,fanButtons);
        funExecution.setEnabled(false);
        funPreview.setEnabled(false);
        stopFun.setEnabled(false);
        while(true){
            Thread.sleep(50);
            if(funAction.getText().equals("No functionality executing")){
                functionalityExecuting = false;
            }
            
            if(funFile != null & firstTime){
                funAction.setText("File "+funFile.getName()+" added");
                funExecution.setEnabled(true);
                funPreview.setEnabled(true);
                stopFun.setEnabled(true);
                firstTime = false;
            }else if (funFile == null){
                funAction.setText("No file added");
            }
        }
    }
    
    private void enterFans(List<Fan> fanBottons) {
        int buttonWidth = 50;
        int buttonHeight = 50;
        int verticalSpacing = 100;
        int horizontalSpacing = 100;
        int hDist = 40, vDist = 70;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                int start = (i * cols + j) * 6 + 1;
                int end = start + 5;

                for (int k = start; k <= end; k++) {
                    JButton f = new JButton("" + k);
                    int xOffset = hDist+j * horizontalSpacing;
                    int yOffset = vDist+i * (buttonHeight + verticalSpacing);

                    if (k % 2 != 0) {
                        f.setBounds(xOffset, yOffset + ((k - start) / 2) * buttonHeight, buttonWidth, buttonHeight);
                    } else {
                        f.setBounds(xOffset + buttonWidth, yOffset + ((k - start) / 2) * buttonHeight, buttonWidth, buttonHeight);
                    }
                    this.add(f);
                    fanPanel.add(f);
                    fanBottons.add(new Fan(f));
                    final int n = k-1;
                    f.addActionListener((ActionEvent evt) -> {
                        fanActionPerformed(evt, n);
                    });
                }
            }
        }
        this.revalidate();
        this.repaint();
    }
    
    public void fanActionPerformed(ActionEvent evt, int fanNumber){
        activeFan = fanNumber;
        fanControl(activeFan);
    }
        
    public void setFansColor(int cant, List<Fan> fanBottons){
        for (int i = fanBottons.size()-1; i >= 6*cant; i--) {
            fanBottons.get(i).button.setBackground(Color.red);
            fanBottons.get(i).button.removeNotify();
            fanBottons.remove(i);
        }
        System.out.println("La cantidad de clientes es: "+fanBottons.size());
        speedMessage = new int[fanBottons.size()];
        for (int i = 0; i < 6*cant; i++) {
            fanBottons.get(i).button.setBackground(Color.white);
            speedMessage[i] = 0;
        }
    }
    
    public void fanControl(int i){
        if (fanButtons.get(i).selected){
            fanButtons.get(i).selected = false;
            fanButtons.get(i).button.setBackground(Color.white);
        }else{
            fanButtons.get(i).selected = true;
            fanButtons.get(i).button.setBackground(Color.green);
        }
        speedSlider.setValue(fanButtons.get(i).speed);
        showSpeed.setText(""+speedSlider.getValue());
    }
    
    @Override
    public void paint(Graphics g) {
        if (speedMessage != null) {
            if(speedPanel.getSelectedIndex() == tab1Index){
                super.paint(g);
                int dim = 50;
                int verticalSpacing = 120, horizontalSpacing = 120;
                int hDist = 75, vDist = 550;
                int buttonHeight = 60, buttonWidth = 60;

                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) {
                        int start = (i * cols + j) * 6 + 1;
                        int end = start + 5;

                        for (int k = start; k <= end; k++) {
                            if (k <= server.clients.size() * 6) {
                                int xOffset = hDist + j * horizontalSpacing;
                                int yOffset = vDist + i * (verticalSpacing + buttonHeight);

                                // Escala de intensidad del rojo basada en speedMessage
                                int intensity = Math.min(255, (int) (speedMessage[k - 1] * 2.55));
                                g.setColor(new Color(255, 0, 0, intensity));

                                // Lógica de ventiladores impares y pares
                                if (k % 2 != 0) {  // Ventilador impar
                                    g.fillRect(xOffset - dim / 2, yOffset + ((k - start) / 2) * buttonHeight - dim / 2, dim, dim);
                                } else {  // Ventilador par
                                    g.fillRect(xOffset + buttonWidth - dim / 2, yOffset + ((k - start) / 2) * buttonHeight - dim / 2, dim, dim);
                                }
                            }
                        }
                    }
                }
            }else{
                
            }
        }
    }
    
    public void updateDrawing (){
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseFunctionality;
    private javax.swing.JButton dragAndDropFunctionality;
    private javax.swing.JLabel executing;
    private javax.swing.JPanel fanPanel;
    private javax.swing.JLabel funAction;
    private javax.swing.JButton funExecution;
    private javax.swing.JButton funPreview;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.Menu menu3;
    private java.awt.Menu menu4;
    private java.awt.Menu menu5;
    private java.awt.Menu menu6;
    private java.awt.MenuBar menuBar1;
    private java.awt.MenuBar menuBar2;
    private java.awt.MenuBar menuBar3;
    private javax.swing.JPanel preassurePanel;
    private javax.swing.JButton pressureSensor;
    private javax.swing.JButton selectAll;
    private javax.swing.JLabel showSpeed;
    private javax.swing.JTabbedPane speedPanel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JButton stopAllFans;
    private javax.swing.JButton stopFun;
    private javax.swing.JButton unselectAll;
    private javax.swing.JButton updateSpeed;
    // End of variables declaration//GEN-END:variables
    }
